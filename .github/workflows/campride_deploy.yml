name: Campride Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: campride-deploy
  CODE_DEPLOY_APPLICATION_NAME: campride
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: campride-group

permissions:
  contents: read

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Upload repository
        uses: actions/upload-artifact@v2
        with:
          name: repo
          path: .

  create-config:
    name: Create Configuration Files
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Download repository
        uses: actions/download-artifact@v2
        with:
          name: repo

      - name: Make resources file
        run: |
          cd ./src/main
          mkdir -p ./resources
          cd ./resources
          echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.yaml
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./application.properties.yaml

      - name: Make firebase config file
        run: |
          cd ./src/main/resources
          mkdir -p ./firebase
          cd ./firebase
          echo "${{ secrets.FIREBASE_CONFIG }}" > ./${{ secrets.FIREBASE_FILE_NAME }}

      - name: Upload config files
        uses: actions/upload-artifact@v2
        with:
          name: config
          path: ./src/main/resources

  build:
    name: Build
    needs: create-config
    runs-on: ubuntu-latest
    steps:
      - name: Download repository
        uses: actions/download-artifact@v2
        with:
          name: repo

      - name: Download config files
        uses: actions/download-artifact@v2
        with:
          name: config
          path: ./src/main/resources

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build/libs

  deploy-to-s3:
    name: Deploy to S3
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download repository
        uses: actions/download-artifact@v2
        with:
          name: repo

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build/libs

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

  deploy-to-ec2:
    name: Deploy to EC2
    needs: deploy-to-s3
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --file-exists-behavior OVERWRITE \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip